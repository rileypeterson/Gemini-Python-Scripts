[File_Paths]
# Directory where simulations will be made. Created if it doesn't exist.
base_folder : "/Users/test/Gemini-Python-Scripts/Examples/example_2/"
# (Optional) login.cl file so that iraf/pyraf is imported properly.
login_cl_path : "/Users/test/"
# PSF kernel that will be convolved with the galaxies.
psf_image : "/Users/test/Gemini-Python-Scripts/Examples/example_1/psf-1500-1500.fits"
# Path to galfit executable (typically "galfit").
galfit_path : "/Users/test/Downloads/galfit"

[Tasks]
# Tasks to be executed in this order.
# Create galfit input (feedme) files
make_feedmes : "yes"
# Method by which feedmes are created
# Options are **only** "random" or "interpolate"
make_feedmes_method : "random"
# If "yes" simulated galaxies are placed in pairs with a predetermined "distance" between galaxies
make_pairs : "no"
# Create galaxy models according to feedme files using GALFIT
make_galaxies : 'yes'
# If "yes" galaxies are convolved with the supplied psf_image (convolve_fft)
convolve : 'yes'
# If "yes",
mknoise_cutouts : 'no'
create_large_field = 'yes' # if "yes", allows the large field to be created

[General_Params]
# None or int, if None result will not be the same for each run
# Seed is logged
universal_seed : None
# Magnitude zeropoint
mag_zp : 25.9463
# Number of simulations to create
number_of_sims : 500 # Need be even int
# Size of cutouts to be created for individual simulations
cutout_size = 400 # Need be even int, recommend ~400




### Logistics
base_folder = "/Users/test/Gemini-Python-Scripts/Examples/example_2/" #directory where simulations will be made, created if it doens't exist
login_cl_path = "/Users/test/" #so that from pyraf import iraf is imported properly
psf_image = "/Users/test/Gemini-Python-Scripts/Examples/example_1/psf-1500-1500.fits" #psf kernel that will be convolve with the galaxies
galfit_binary = "/Users/test/Downloads/galfit" #path to GALFIT, if you can run GALFIT with "$galfit obj.in", just put galfit here



### Make input files for your galaxies
make_feedmes = 'yes' # if "yes", feedmes are made for the number of galaxies in number_of_sims. If running make_pairs I believe this needs to be "yes".
feedme_verbose = "yes"

large_field_xdim,large_field_ydim = 1000,1000 # x,y ; the dimensions of your simulated image
mag_range = [16,28] # The next five parameters are ranges for the parameters, if make_interpolate_chain = "yes" and the appropriate variables are defined these are interpolated, else selected random from within the ranges
re_range = [2,40]
n_range = [0.5,5.5]
q_range = [0.05,1.0]
pa_range = [-90,90]

number_of_sims = 500 # Should be even int, number of simulated galaxies in the image, if make_pairs="yes" and the maximum pixel distance is large it might not be possible to place this number, the script will inform the user if this happens
cutout_size = 400 # Should be even int, length size of the cutouts created (recommend large ~400 so that none of the light is accidentally clipped if it is a large galaxy)
sky_range = [0,0] #Range of sky values, I generally leave this as [0,0], works like the ranges above but is for the sky
mag_zp = 25.9463 #Magnitude zeropoint
#plt_scale_ratio=2.1375 #I don't think this is necessary anymore. For drizzling, since my flts had plate scale (0.13) and final drizzle was (0.06) I was trying to simulate galaxies in the flt using data from the drz, therefore their radii had to be shrunk. I figured out how to use the blot task to create an flt from the drz, so this happens then.
universal_seed = 45 ### can be None or int, super helpful for reproducibility. Same seed produces same results

make_interpolate_chain = "no" # if "yes", values are interpolated from SExtractor output tables. Currently, needs to be "yes" if making pairs.
if make_interpolate_chain=="yes":
    #first parameter to be interpolated
    chain_type1 = "cubic"
    chain_plot1 = "yes"
    chain_bins1 = 40
    chain_data1 = "/Users/rpeterson/FP/GALFIT_Simulations1/SExtractor_missing_problem/actual_data_trial_field/UV105842F160W/UV105842F160W_phot/UV105842F160W_tab_all.fits" #Only works for fits files right now, might make for text later
    chain_column1 = "MAG_AUTO"
    chain_obj1 = "mag"

    do_chain2 = "yes"
    if do_chain2=="yes":
        #second parameter which is interpolated
        chain_type2 = "linear"
        chain_plot2 = "yes"
        chain_data2 = "/Users/rpeterson/FP/GALFIT_Simulations1/SExtractor_missing_problem/actual_data_trial_field/UV105842F160W/UV105842F160W_phot/UV105842F160W_tab_all.fits" #Only works for fits files right now, might make for text later
        chain_column2 = "FLUX_RADIUS"
        chain_obj2 = "re"
        #if "re" is chain_obj2, will assume that "ELLIPTICITY" exists within chain_data2, and will interpolate the circularized effective radius

    #chain_type3 = "linear"
    #chain_plot3 = "yes"
    #chain_data3 = "/Users/rpeterson/FP/UV-105842_id6p01/UV-105842_id6p01_phot/uv-105842_d6p-01-284.0-f160wtab_all.fits" #Only works for fits files right now, might make for text later
    #chain_column3 = "FLUX_RADIUS"
    #chain_obj3 = "re"

### Makes pairs of galaxies. First half are "parents" randomly placed, second half are "childs" determined by stepping through these intervals
### The last argument in each of these multiplied together should be half the number of sims
### For example pixel_distance_steps=np.linspace(5,55,10),luminosity_ratio_steps=np.linspace(0.5,2,4),re_ratio_steps=np.linspace(0.2,3,5),n_steps=np.linspace(1,4,2)
### My number of sims is 800, half of this is 400. 10*4*5*2=400
make_pairs="no"
if make_pairs=="yes":
    pixel_distance_steps=np.linspace(5,55,10) #These can also be custom non linear arrays
    luminosity_ratio_steps=np.linspace(0.5,2,4) #2 means child galaxy will be twice as bright
    interp_re="yes" # if "yes" the re value will be interpolated from the make_interpolate_chain
    if interp_re=="no":
        re_ratio_steps=np.linspace(0.2,3,5) #ratio is circularized effective radius, so it factors in axis ratio, 2 means child will be twice as large (circularized re)
    n_steps=np.linspace(1,4,2)



### Makes the galaxies by sending their feedme/input files to the terminal
make_galaxies = 'yes'
make_galaxies_verbose = "no"

### Convolves with the provided PSF using from astropy.convolution import convolve_fft
convolve = 'yes'
convolution_verbose = "yes"

### Adds noise to individual cutouts
mknoise_cutouts = 'no' #Should probably be yes if adding to existing image
mknoise_cutouts_verbose = "yes"

if mknoise_cutouts=="yes":
    background = 0.136392
    gain = 6529.37744
    rdnoise = 4
    poisson = 'yes'

display_5 = 'no' ### if "yes", displays 5 galaxies at random and shows their feedme files


### Large field
create_large_field = 'yes' # if "yes", allows the large field to be created
display_large_field = "yes"

if create_large_field=="yes":
    image_to_sim = "default" #should be full path to it, shouldn't be in base_folder. If not "default", the image provided will be used to determine possible coordinates (useful if image is rotated)
    image_to_sim_ext=0 #default is 0, if image_to_sim has multiple extensions this is the extensions number you want to simulate
    image_to_add_to="default" #should be full path to it. If not "default" galaxies will be added to this image
    sky_value = 0 # Should probably be zero, if nonzero it sets all the points in your simulated image that aren't zero in the original to sky_value

    add_mknoise_large1 = "no" # I doubt this will ever be used. Probably should be set to "no". Adds noise to a blank image.

    if add_mknoise_large1=="yes":
        background1 = 0.136392
        gain1=6529.37744
        rdnoise1=2
        poisson1="yes"

    add_models = "yes" #if "yes", models will be added to the image
    add_models_verbose = "yes" #my preference is to leave this as "yes"
    label = "yes" #if "yes" a region file will be created and if display_large_field="yes" the region file is displayed. Note their is a 3 pixel offset so that labels don't block the actual galaxy.
    label_verbose = "no"
    save = "no" #if "yes", saves final output
    if add_models == "yes":
        which_to_add="_convolved" #options are "", "_convolved", "_noised" or "_convolved_noised" #the type of model that will be added
        how_many_to_add = 500 # should be <= number_of_sims, number of models that will be added to the large field
        not_near_edge="yes" # if "yes", galaxies are prevented from going near the edge of the image according to the pixel distance clearance
        if not_near_edge=="yes":
            clearance=50

        ### Adds noise after galaxies have been placed in the image, should probably be no if adding to existing images
        add_mknoise_large2="yes" #If drizzling this should be "no", but the values below should be defined. if "yes", then drizzle should be set to "no", and noise is added using IRAF's mknoise.
        background2 = 0.623
        gain2=1632.34375/2.5 #mknoise gain
        rdnoise2=20 #mknoise read noise
        poisson2="yes" #mknoise add poisson noise

        drizzle="no" #if "yes", drizzling is performed
        if drizzle=="yes":
            path_to_flts="/Users/rpeterson/Downloads/id6p01???_flt.fits" #Path to your flt images wildcard (*) or question mark (?) should be placed where necessary. E.g. path_to_flts="/Users/rpeterson/Downloads/id6p01???_flt.fits", such that glob.glob(path_to_flts) will get all your flts
            path_to_actual_driz="/Users/rpeterson/FP/do_everything/UV105842F160W/UV105842F160W_drz.fits"
            display_blots="yes" #Will display blotted (distorted flts)
            backgrounds=[0.6351,0.606,0.6373,0.606] #If "default" will use the background2 value above as the value for each flt, otherwise it is the list of specific values for each simulated flt e.g. backgrounds=[0.6351,0.606,0.6373,0.606]

            ###Originally I had the sky comparison be for user specified regions but this became way too complicated, instead the entire image is compared (histogram ranges are determined by range_sky=(im1_med-3*im1_std,im1_med+3*im1_std) see definition sky_compare for more details)

            compare_noised_blots_sky="yes" #Will display the blotted noised images
            #Astrodrizzle Parameters, default is to just make the finally drizzled image without sky subtraction and to clean intermediate images, the user can edit this within the actual code to suite their needs
            final_bits,final_pixfrac,final_fillval,final_scale,final_rot,resetbits=576,0.8,0,0.06,0,0

            compare_final_drz="yes"


    compare_sky="no" #if "yes", compares sky of final_image for example drizzle="no" and add_mknoise_large2="yes" to image to sim. If image_to_sim is default makes a histogram of the simulate image
    #If you really want to compare specific regions use the commented part below, otherwise will use the whole image and clip the sky according to the median
    """
    if compare_sky=="yes":
        real_sky_lowerx,real_sky_lowery, real_sky_upperx,real_sky_uppery=489,690,605,765    ### Eight coordinates here, if any==None, then both images are display, and user is prompted for values
        sim_sky_lowerx,sim_sky_lowery, sim_sky_upperx,sim_sky_uppery=None,446,593,498
    """
